apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
  compileSdkVersion COMPILE_SDK_VERSION

  defaultConfig {
    minSdkVersion MIN_SDK_VERSION
    targetSdkVersion TARGET_SDK_VERSION
    versionCode VERSION_CODE
    versionName VERSION_NAME

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    buildConfigField 'String', 'MAIN_NETWORK_PROXY_CONTRACT_ADDRESS',
        "\"" + project.MAIN_NETWORK_PROXY_CONTRACT_ADDRESS + "\""
    buildConfigField 'String', 'ROPSTEN_NETWORK_PROXY_CONTRACT_ADDRESS',
        "\"" + project.ROPSTEN_NETWORK_PROXY_CONTRACT_ADDRESS + "\""
    buildConfigField 'String', 'MAIN_NETWORK_BACKEND_BASE_HOST',
        "\"" + project.MAIN_NETWORK_BACKEND_BASE_HOST + "\""
    buildConfigField 'String', 'ROPSTEN_NETWORK_BACKEND_BASE_HOST',
        "\"" + project.ROPSTEN_NETWORK_BACKEND_BASE_HOST + "\""
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  compileOptions {
    targetCompatibility TARGET_COMPATIBILITY
    sourceCompatibility SOURCE_COMPATIBILITY
  }
}

dependencies {
  testImplementation lib.junit
  testImplementation lib.mockito_core
  androidTestImplementation lib.android_test_runner

  api lib.retrofit2
  api lib.web3j
  api project(':appcoins-core')
}

//Publish configuration
task androidSourcesJar(type: Jar) {
  archiveClassifier.set('sources')
  from android.sourceSets.main.java.srcDirs
}

artifacts {
  archives androidSourcesJar
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
  println "Found secret props file, loading props"
  Properties p = new Properties()
  p.load(new FileInputStream(secretPropsFile))
  p.each { name, value ->
    ext[name] = value
  }
} else {
  println "No props file, loading env vars"
  ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
  ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
  ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
  ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
  ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
  ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
  publications {
    release(MavenPublication) {
      groupId PUBLISH_GROUP_ID
      artifactId project.name
      version PUBLISH_VERSION

      artifact("$buildDir/outputs/aar/${project.name}-${System.getenv('BUILD_TYPE_NAME')}.aar")
      artifact androidSourcesJar

      pom {
        name = project.name
        description = 'AppCoins Billing SDK'
        url = 'https://github.com/Catappult/appcoins-sdk/appcoins-core'
        licenses {
          license {
            name = 'The Apache License, Version 3.0'
            url = 'http://www.apache.org/licenses/LICENSE-3.0.txt'
          }
        }
        developers {
          developer {
            id = 'appcoins.wallet'
            name = 'AppCoins Wallet Team'
            email = 'wallet@aptoide.com'
          }
        }
        scm {
          connection = 'scm:git:github.com/Catappult/appcoins-sdk.git'
          developerConnection = 'scm:git:ssh://github.com/Catappult/appcoins-sdk.git'
          url = 'https://github.com/Catappult/appcoins-sdk'
        }
        withXml {
          def dependenciesNode = asNode().appendNode('dependencies')

          project.configurations.implementation.allDependencies.each {
            if (it.name != "unspecified"){
              def dependencyNode = dependenciesNode.appendNode('dependency')
              dependencyNode.appendNode('groupId', it.group)
              dependencyNode.appendNode('artifactId', it.name)
              dependencyNode.appendNode('version', it.version)
            }
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = "sonatype"

      def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

      credentials {
        username OSSRH_USERNAME
        password OSSRH_PASSWORD
      }
    }
  }
}

signing {
  sign publishing.publications
}
//end publish configuration
